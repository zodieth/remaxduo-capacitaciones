datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  image         String?
  password      String
  accounts      Account[]
  agentId       String?
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsefulLink {
  id          String  @id @default(uuid())
  title       String
  url         String  @db.Text
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentVariable {
  id          String  @id @default(uuid())
  name        String
  value       String
  description String? @db.Text

  templates      DocumentTemplate[] @relation("DocumentToVariables")
  templateBlocks TemplateBlock[]    @relation("BlockToVariables")
  profiles       ProfileDocumentVariable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentTemplate {
  id          String           @id @default(uuid())
  title       String
  description String?          @db.Text
  content     String?          @db.MediumText
  category    DocumentCategory @default(OTROS)

  variables DocumentVariable[] @relation("DocumentToVariables")

  templateBlocks TemplateBlock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id          String           @id @unique @default(uuid())
  title       String
  documentName String?
  description String?          @db.Text
  content     String           @db.MediumText
  category    DocumentCategory @default(OTROS)
  createdBy   String           @default("system")
  approved   Boolean          @default(true)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [mlsid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

enum DocumentCategory {
  AUTORIZACIONES
  CONTRATOS
  INFORMES
  OTROS
}

model TemplateBlock {
  id      String @id @default(uuid())
  content String @db.MediumText
  isDuplicable Boolean @default(false)
  containsProfile Boolean @default(false)
  canBeDeleted Boolean @default(false)
  index Int

  documentTemplateId String
  documentTemplate   DocumentTemplate @relation(fields: [documentTemplateId], references: [id])

  variables DocumentVariable[] @relation("BlockToVariables")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentTemplateId])
}

model Property {
  mlsid   String @id @unique
  title   String
  address String
  photos  String @db.MediumText // Almacena JSON serializado
  isTemporalProperty Boolean @default(false)

  profiles   Profile[]
  documents  Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String @id @default(uuid())
  name        String
  description String? @db.Text
  category    ProfileCategory @default(OTRO)

  variables   ProfileDocumentVariable[]

  property    Property @relation(fields: [propertyId], references: [mlsid], onDelete: Cascade)
  propertyId  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([propertyId])
}

enum ProfileCategory {
  VENDEDOR
  COMPRADOR
  LOCADOR
  LOCATARIO
  OTRO
}

model ProfileDocumentVariable {
  id                 String           @id @default(uuid())
  value              String           @db.Text

  profile            Profile?          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId          String
  documentVariable   DocumentVariable @relation(fields: [documentVariableId], references: [id], onDelete: Cascade)
  documentVariableId String

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([profileId, documentVariableId])
  @@index([documentVariableId])
}
